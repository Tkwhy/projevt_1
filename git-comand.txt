git config --global user.name"your name" // 设置username
git config --global user.email"your_email@youremail.com" // 设置邮箱

git config --list // 获取config信息

git status  //获取文件状态

git init // 初始化 在工作路径上创建主分支
git add 文件名 // 将某个文件存入暂存区
git add b c //把b和c存入暂存区
git add .  //一次性将所有的新增和修改过的文件加入暂存区：
git clear 清除页面所有代码

//跟踪新文件和提交更新
git commit -m "提交的备注信息"  // 提交更新到仓库
git commit -a -m "提交的备注信息"  //直接提交到仓库 不经过缓存区 适用于已经提交了但修改了的文件

//撤销对文件的修改，还原成git仓库中保存的版本
git checkout -- index.html //命令。撤销对index.html文件的修改

//从暂存区中移出对应的文件，可以用如下命令
git reset HEAD 要移出的文件名称
git reset HEAD . 移出所有在缓存区的文件
 
//从git仓库中移出文件有两种方式
//1、从git仓库和工作区中同时移除对应文件
git rm -f 要移出文件的名字
//2、只从git仓库中移出指定的文件 ， 但保留工作区中对应的文件
git rm --cached 要移除文件的名字

//忽略文件
一般我们总会有一些文件不需要纳入git的管理 也不希望他们总出现在跟踪文件列表。在这种情况下，
我们可以创建一个名为 .gitignore 的配置文件 ，列出要忽略的文件的匹配模式
文件 .gitignore 的格式规范如下:
1、 以 # 开头为注释
2、 以/ 结尾的是目录
3、以/开头防止递归  
4、 以！开头表示取反
5、 可以使用glob模式进行文件和文件夹的匹配（glob 值简化了的正则表达式）
       5.1 glob 模式是指简化了的正则表达式:
	星号 * 匹配零个或者多个任意字符
	[abc]匹配任何一个列在方括号中的字符
	问号 ？只匹配一个任意字符
	在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内都可以进行匹配比如[0-9]表示
	匹配0到9的数字
	两个星号 ** 表示匹配任意中间目录，（比如a/**/z 可以匹配a/z, a/b/z ,a/ b/c/z）

案例.gitignore  文件
/ToDo  /'开头的表示仅屏蔽当前文件夹ToDo下的文件。需要注意的是空文件夹不会被追踪

ToDo/	以'/'结尾的表示屏蔽所有名为ToDo文件夹下的文件下的文件都会被屏蔽。

！a.a	忽略a.a，即对a.a也追踪，一般搭配*.a，而*.a解释见下面一条。

*.a	屏蔽所有扩展名为a的文件，如1.a, 2.a等。

*.[abc]	屏蔽所有扩展名为a,或者b或者c的文件。

*.a?	屏蔽所有扩展名以a开头，且扩展名只有2个字符的文档。？表示一个字符

doc/**/*.pdf   忽略doc/目录级其所有子目录的  .pdf

doc/* .txt 忽略doc/notes.txt 但不忽略 doc/server/arch.txt